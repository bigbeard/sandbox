{
  "name": "coll",
  "version": "0.1.2",
  "author": {
    "name": "Cory Martin"
  },
  "description": "JavaScript Collection Library for Node.js.",
  "keywords": [
    "collection",
    "collections",
    "list",
    "dict",
    "dictionary",
    "map"
  ],
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "git://github.com/corymartin/coll.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/corymartin/coll/raw/master/LICENSE"
    }
  ],
  "devDependencies": {
    "expect.js": "0.1.2",
    "mocha": "1.2.x",
    "coffee-script": "1.3.x"
  },
  "engines": {
    "node": ">= 0.6.x"
  },
  "readme": "Coll\n====\n\nJavaScript Collection Library for Node.js\n\n\nInstallation\n============\nInstall with NPM:\n\n```\n$ npm install coll\n```\n\nIn your JavaScript:\n\n```js\nvar coll = require('coll');\n```\n\nThe Classes\n===========\n\n- __[List]__\n  - *List Creation*\n  - [List Constructor]\n  - [List.range]\n  - *Properties*\n  - [List#length]\n  - *Accessor Functions*\n  - [List#get]\n  - [List#slice]\n  - [List#first]\n  - [List#last]\n  - [List#min]\n  - [List#max]\n  - *Mutator Functions*\n  - [List#set]\n  - [List#add]\n  - [List#addRange]\n  - [List#insert]\n  - [List#insertRange]\n  - [List#remove]\n  - [List#removeFirst]\n  - [List#removeLast]\n  - [List#removeIf]\n  - [List#removeAll]\n  - [List#removeAt]\n  - [List#clear]\n  - *Search Functions*\n  - [List#find]\n  - [List#findLast]\n  - [List#findAll]\n  - [List#contains]\n  - [List#count]\n  - [List#countIf]\n  - [List#filter]\n  - [List#reject]\n  - *Transformation Functions*\n  - [List#sort]\n  - [List#reverse]\n  - [List#concat]\n  - [List#map]\n  - [List#intersperse]\n  - [List#join]\n  - [List#unique]\n  - [List#clean]\n  - [List#clone]\n  - [List#toArray]\n  - *Sub-List Functions*\n  - [List#take]\n  - [List#takeWhile]\n  - [List#drop]\n  - [List#dropWhile]\n  - [List#group]\n  - [List#partition]\n  - [List#intersect]\n  - [List#difference]\n  - [List#union]\n  - *Zipping Functions*\n  - [List#zip]\n  - *Indexing Functions*\n  - [List#indexOf]\n  - [List#lastIndexOf]\n  - [List#indexIf]\n  - [List#lastIndexIf]\n  - [List#indicesOf]\n  - [List#indicesIf]\n  - *Iteration Functions*\n  - [List#forEach]\n  - [List#some]\n  - [List#every]\n  - [List#reduce]\n  - [List#reduceRight]\n- __[Dict]__\n  - *Dict Creation*\n  - [Dict Constructor]\n  - *Properties*\n  - [Dict#length]\n  - [Dict#keys]\n  - [Dict#values]\n  - *Accessor Functions*\n  - [Dict#hasKey]\n  - [Dict#get]\n  - *Mutator Functions*\n  - [Dict#set]\n  - [Dict#add]\n  - [Dict#remove]\n  - [Dict#clear]\n  - *Iteration Functions*\n  - [Dict#forEach]\n  - [Dict#some]\n  - [Dict#every]\n  - *Search Functions*\n  - [Dict#filter]\n  - [Dict#reject]\n  - *Transformation Functions*\n  - [Dict#clone]\n  - [Dict#fill]\n  - [Dict#toLiteral]\n  - [Dict#toArray]\n- __[Map]__\n  - *Map Creation*\n  - [Map Constructor]\n  - *Properties*\n  - [Map#length]\n  - [Map#keys]\n  - [Map#values]\n  - *Accessor Functions*\n  - [Map#hasKey]\n  - [Map#get]\n  - *Mutator Functions*\n  - [Map#set]\n  - [Map#remove]\n  - [Map#clear]\n  - *Iteration Functions*\n  - [Map#forEach]\n  - [Map#some]\n  - [Map#every]\n  - *Search Functions*\n  - [Map#filter]\n  - [Map#reject]\n  - *Transformation Functions*\n  - [Map#clone]\n  - [Map#fill]\n  - [Map#toLiteral]\n  - [Map#toArray]\n\n\n\n<a name='list'></a>\nList\n====\nAn indexed list of items with functions for manipulating, iterating,\nsearching, indexing, and transforming.\n\n\n<a name='list-constructor'></a>\nList Constructor\n----------------\n`new` is optional\n\n```js\nvar ls1 = new coll.List;\nvar ls2 = coll.List();\n\nls1 instanceof coll.List; // true\nls2 instanceof coll.List; // true\n```\n\nAccepts any *iterable* item to initially populate the list.\nAn iterable is most anything with indexes and a length property\nthat can be iterated over.\n\n```js\nvar ls1 = coll.List([2, 4, 6]);\n// ls1 => [2, 4, 5]\n\nvar ls2 = coll.List('abc');\n// ls2 => ['a', 'b', 'c']\n\nvar ls3 = coll.List(coll.List([true, 2.99]))\n// ls3 => [true, 2.99]\n\n;(function() {\n  var argls = coll.List(arguments);\n  // argls => ['hi', true, /foo/]\n})('hi', true, /foo/);\n```\n\n\nList Functions\n--------------\n\n<a name='list_range'></a>\n### List.range( start [, end [, step]] )\nReturns a `List` of numbers from `start` up to and including `end`.\nIf only `start` is passed, a list of numbers ranging from `0` through\n`start` will be returned. If the optional `step` parameter is passed,\nthat will be used as the incrementing value. The default increment is `1`.\n\n```js\nvar ls = coll.List.range(-4, 4);\n// ls => [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n```\n```js\nvar ls = coll.List.range(3);\n// ls => [0, 1, 2, 3]\n```\n```js\nvar ls = coll.List.range(8, 18, 2);\n// ls => [8, 10, 12, 14, 16, 18]\n```\n\n\nList Instance Properties\n------------------------\n\n<a name='list-length'></a>\n### List#length\nNumber of items in the list.\n\n```js\nvar ls = coll.List([2,4,6]);\n// ls.length => 3\n```\n\nList Instance Functions\n-----------------------\n\n<a name='list-get'></a>\n### List#get( index [, \\_default] )\nReturns the item at the specifed index.\nIf the index is not present within the list, a `RangeError` is thrown.\nIf the optional `_default` value is passed, that will be returned when\nthe index is not present.\n\n```js\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\nvar x = ls.get(2);\n// x => 'pear'\n\nls.get(37); // throws RangeError\n\nx = ls.get(37, 'mango');\n// x => 'mango'\n```\n\n<a name='list-slice'></a>\n### List#slice( [beginindex [, endindex]] )\nReturns a section of the list.\nFunctions the same as `Array#slice` except this version returns\nan instance of `List`.\n\n```js\nvar ls = coll.List('abcde');\nvar x = ls.slice(2, 4);\n// x  => ['c', 'd']\n// ls => ['a', 'b', 'c', 'd', 'e']\n```\n\n<a name='list-first'></a>\n### List#first( [\\_default] )\nReturns the first item in the list.\nIf the list is empty, `undefined` is returned.\nIf an optional `_default` value is passed, that will be returned in the\ncase of an empty list.\n\n```js\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\nvar x = ls.first();\n// x => 'apple'\n```\n```js\nvar ls = coll.List();\nvar x = ls.first();\n// x => undefined\n\nx = ls.first('foo');\n// x => 'foo'\n```\n\n<a name='list-last'></a>\n### List#last()\nReturns the last item in the list.\nIf the list is empty, `undefined` is returned.\nIf an optional `_default` value is passed, that will be returned in the\ncase of an empty list.\n\n```js\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\nvar x = ls.last();\n// x => 'grape'\n```\n```js\nvar ls = coll.List();\nvar x = ls.last();\n// x => undefined\n\nx = ls.last('bar');\n// x => 'bar'\n```\n\n<a name='list-min'></a>\n### List#min( [comparer] )\nReturns the item with the minimum value from the list.\n\nThe optional `comparer` parameter can be either a function or a string.\nIf it is a function, then it will be used to determine the minimum value.\n`comparer` functions work as they do in `Array#sort`.\n\nIf `comparer` is a string, then it will be assumed that the list is composed\nof objects and the value to be compared will be that of the\nproperty name passed.\n\n```js\nvar ls = coll.List([4,2,8,5]);\nvar x = ls.min();\n// x => 2\n```\n```js\n// With optional comparer function\nvar ls = coll.List(['aaa', 'bb', 'ccccccc', 'dddd']);\nvar x = ls.min(function(a, b) {\n  return a.length - b.length;\n});\n// x => 'bb'\n```\n```js\n// With optional comparer property name\nvar ls = coll.List([\n  {foo:34, bar:'erf'},\n  {foo:12, bar:'xcv'},\n  {foo:45, bar:'bhu'},\n  {foo:26, bar:'aer'}\n]);\nvar x = ls.min('bar');\n// x => {foo:26, bar:'aer'}\n```\n\n<a name='list-max'></a>\n### List#max( [comparer] )\nReturns the item with the maximum value from the list.\n\nThe optional `comparer` parameter can be either a function or a string.\nIf it is a function, then it will be used to determine the maximum value.\n`comparer` functions work as they do in `Array#sort`.\n\nIf `comparer` is a string, then it will be assumed that the list is composed\nof objects and the value to be compared will be that of the\nproperty name passed.\n\n```js\nvar ls = coll.List([4,2,8,5]);\nvar x = ls.max();\n// x => 8\n```\n```js\n// With optional comparer function\nvar ls = coll.List(['aaa', 'bb', 'ccccccc', 'dddd']);\nvar x = ls.max(function(a, b) {\n  return a.length - b.length;\n});\n// x => 'ccccccc'\n```\n```js\n// With optional comparer property name\nvar ls = coll.List([\n  {foo:34, bar:'erf'},\n  {foo:12, bar:'xcv'},\n  {foo:45, bar:'bhu'},\n  {foo:26, bar:'aer'}\n]);\nvar x = ls.max('bar');\n// x => {foo:12, bar:'xcv'}\n```\n\n<a name='list-set'></a>\n### List#set( index, obj )\nSet the list item at `index` to `obj`.\n\n```js\nvar ls = coll.List([1,2,3]);\nls.set(1, 99);\n// ls => [1, 99, 3]\n```\n\n<a name='list-add'></a>\n### List#add( item [, item*N*] )\nAppends one or more items to the end of the list.\nReturns the list instance.\n\n```js\nvar ls = coll.List('abc');\nls.add('d');\nls.add('e', 'f');\n// ls => ['a', 'b', 'c', 'd', 'e', 'f']\n```\n\n<a name='list-addrange'></a>\n### List#addRange( iterable )\nAppends a range of new items to the end of the list.\nReturns the list instance.\n\n```js\nvar ls = coll.List();\nls.addRange([2,4,6]);\nls.addRange('abc');\n// ls => [2, 4, 6, 'a', 'b', 'c']\n```\n\n<a name='list-insert'></a>\n### List#insert( index, item )\nInserts a new item at the specified index.\nReturns the list instance.\n\n```js\nvar ls = coll.List('abd');\nls.insert(2, 'c');\n// ls => ['a', 'b', 'c', 'd']\n```\n\n<a name='list-insertrange'></a>\n### List#insertRange( index, iterable )\nInserts a range of new items starting at the specifed index.\nReturns the list instance.\n\n```js\nvar ls = coll.List([10,20,30]);\nls.insertRange(1, [12,14]);\n// ls => [10, 12, 14, 20, 30]\n```\n\n<a name='list-remove'></a>\n### List#remove( item [, index] )\nRemoves the first occurence of the passed item in the list.\nReturns the removed item, or `undefined` if the item is not in the list.\nIf the optional `index` parameter is passed, the first matching item after\nthat index will be removed.\n\n```js\nvar ls = coll.List([1,4,2,6,2,3]);\nvar x = ls.remove(2);\n// x  => 2\n// ls => [1, 4, 6, 2, 3]\n```\n\n<a name='list-removefirst'></a>\n### List#removeFirst()\nRemoves and returns the first item in the list.\n\n```js\nvar ls = coll.List(['some', 'text', 'and', 'stuff']);\nvar x = ls.removeFirst();\n// x  => 'some'\n// ls => ['text', 'and', 'stuff']\n```\n\n<a name='list-removelast'></a>\n### List#removeLast()\nRemoves and returns the last item in the list.\n\n```js\nvar ls = coll.List(['some', 'text', 'and', 'stuff']);\nvar x = ls.removeLast();\n// x  => 'stuff'\n// ls => ['some', 'text', 'and']\n```\n\n<a name='list-removeif'></a>\n### List#removeIf( [context,] iterator )\nRemoves and returns the first item in the list to pass the `iterator` function.\nIf no item passes the `iterator` test, `undefined` is returned.\n\n```js\nvar ls = coll.List([2,4,6,7,8]);\nvar x = ls.removeIf(function(item, index, list) {\n  return item % 2 !== 0;\n});\n// x  => 7\n// ls => [2, 4, 6, 8]\n\n// With optional context\nvar obj = {foo:'bar'};\nls.removeIf(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-removeall'></a>\n### List#removeAll( [context,] iterator )\nRemoves every item in the list that passes the `iterator` test.\nReturns a new `List` of the removed items.\n\n```js\nvar ls = coll.List([1,2,3,4,5,6,7,8]);\nvar x = ls.removeAll(function(item, index, list) {\n  return item % 2 === 0;\n});\n// x  => [2, 4, 6, 8]\n// ls => [1, 3, 5, 7]\n\n\n// With optional context\nvar obj = {foo:'bar'};\nls.removeAll(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-removeat'></a>\n### List#removeAt( index [, howmany] )\nRemoves the item at the given index.\nReturns the removed item.\nIf the optional `howmany` parameter is passed, a range of items is removed\nstarting at the index. A new `List` of the removed items will then be returned.\n\n```js\nvar ls = coll.List('abcdef');\nvar x = removeAt(2);\n// x  => 'c'\n// ls => ['a', 'b', 'd' 'e', 'f']\n```\n```js\n// With `howmany` parameter\nvar ls = coll.List('abcdef');\nvar x = removeAt(2, 3);\n// x  => ['c', 'd', 'e']\n// ls => ['a', 'b', 'f']\n```\n\n<a name='list-clear'></a>\n### List#clear()\nRemoves all items from the list. Returns the instance.\n\n```js\nvar ls = coll.List([1,2,3]);\nvar x = ls.clear();\n// ls => []\nx === ls; // true\n```\n\n<a name='list-find'></a>\n### List#find( [context,] iterator )\nReturns the first item in the list to pass the `iterator` test.\nIf no item passes the `iterator` test, `undefined` is returned.\n\n```js\nvar ls = coll.List(23, '45', Date.now(), 'foo', 99.99, 'bar']);\nvar x = ls.find(function(item, index, list) {\n  return isNaN(item);\n});\n// x => 'foo'\n\n// With optional context\nvar obj = {foo:'bar'};\nls.find(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-findLast'></a>\n### List#findLast( [context,] iterator )\nReturns the last item in the list that passes the `iterator` test.\nIf no item passes the `iterator` test, `undefined` is returned.\n\n```js\nvar ls = coll.List(['aa', 'bb', 'cccccccc', 'dd', 'eeeeee']);\nvar x = ls.findLast(function(item, index, list) {\n  return item.length < 3;\n});\n// x => 'dd'\n\n// With optional context\nvar obj = {foo:'bar'};\nls.findLast(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-findall'></a>\n### List#findAll( [context,] iterator )\nReturns a new `List` of every item in the instance list that passes the\n`iterator` test.\n\n```js\nvar ls = coll.List(['aa', 'bb', 'cccccccc', 'dd', 'eeeeee']);\nvar x = ls.findAll(function(item, index, list) {\n  return item.length < 3;\n});\n// x => ['aa', 'bb', 'dd']\n\n// With optional context\nvar obj = {foo:'bar'};\nls.findAll(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n```\n\n<a name='list-contains'></a>\n### List#contains( item )\nDetermines if the passed item is in the list.\n\n```js\nvar ls = coll.List(['top', 'bottom', 'left']);\nls.contains('left');  // true\nls.contains('right'); // false\n```\n\n<a name='list-count'></a>\n### List#count( [item] )\nReturns the number of occurences of `item` within the list.\nIf no argument is passed, the list's length is returned.\n\n```js\nvar ls = coll.List([2,4,2,7,2,8]);\nvar x = ls.count(2);\n// x => 3\n```\n\n<a name='list-countif'></a>\n### List#countIf( [context,] iterator )\nReturns the number of occurences that the `iterator` tests successfully against\nthe items in the list.\n\n```js\nvar ls = coll.List([1,2,3,4,5,6,7,8,9]);\nvar x = ls.countIf(function(item, index, list) {\n  return item % 2 === 0;\n});\n// x => 4\n\n// With optional context\nvar obj = {foo:'bar'};\nls.countIf(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-filter'></a>\n### List#filter( [context,] iterator )\nReturns a new `List` composed of items that pass the `iterator` function.\n\n```js\nvar ls = coll.List([\n  {name:'Jay'}, {name:'Joan'}, {name:'Bob'}, {name:'Flo'}, {name:'Jim'}\n]);\nvar x = ls.filter(function(item, index, list) {\n  return item.name[0] === 'J';\n});\n// x => [\n//  {name:'Jay'}, {name:'Joan'}, {name:'Jim'}\n// ]\n\n// With optional context\nvar obj = {foo:'bar'};\nls.filter(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-reject'></a>\n### List#reject( [context,] iterator )\nReturns a new `List` composed of items that fail the `iterator` function.\n\n```js\nvar ls = coll.List([\n  {name:'Jay'}, {name:'Joan'}, {name:'Bob'}, {name:'Flo'}, {name:'Jim'}\n]);\nvar x = ls.reject(function(item, index, list) {\n  return item.name[0] === 'J';\n});\n// x => [\n//  {name:'Bob'}, {name:'Flo'}\n// ]\n\n// With optional context\nvar obj = {foo:'bar'};\nls.reject(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-sort'></a>\n### List#sort( [comparer] )\nReturns a new, sorted `List` of the instance's items.\nNumeric items (numbers, dates, booleans) are sorted numerically.\nOther types are sorted lexicographically.\n\nIf a list contains mixed types, the order of sort precedence is:\n\n1. number literals\n2. string literals\n3. boolean literals\n4. date objects\n5. number objects\n6. string objects\n7. boolean objects\n8. regexes\n9. functions\n10. objects\n11. arrays\n12. global properties (`NaN`, `Infinity`, `undefined`, `null`)\n\nThe optional `comparer` parameter can be either a function or a string.\nIf it is a function, then it will be used to determine sort order.\n`comparer` functions work as they do in `Array#sort`.\n\nIf `comparer` is a string, then it will be assumed that the list is composed\nof objects and they will be sorted by the property name passed.\n\n```js\nvar ls = coll.List([33, 4, 77, 5, 2, 8]);\nvar x = ls.sort();\n// x  => [2, 4, 5, 8, 33, 77]\n```\n```js\n// Mixed types\nvar date1 = new Date('2012-06-23')\nvar date2 = new Date('2000-01-01')\nvar ls = coll.List(\n  [9, 'a', /foo/, true, 0, date1, {a:1}, 'sd', date2, 5, false, '1']\n);\nvar x = ls.sort();\n// x =>\n//  [0, 5, 9, '1', 'a', 'sd', false, true, date2, date1 /foo/, {a:1}]\n```\n```js\n// With optional comparer function\nvar ls = coll.List([33, 4, 77, 5, 2, 8]);\nvar x = ls.sort(function(a, b) {\n  return b - a;\n});\n// x  => [77, 33, 8, 5, 4, 2]\n```\n```js\n// With optional comparer property name\nvar ls = coll.List([\n  {foo:34, bar:'erf'},\n  {foo:12, bar:'xcv'},\n  {foo:45, bar:'bhu'},\n  {foo:26, bar:'aer'}\n]);\nvar x = ls.sort('bar');\n// x => [\n//  {foo:26, bar:'aer'},\n//  {foo:45, bar:'bhu'},\n//  {foo:34, bar:'erf'},\n//  {foo:12, bar:'xcv'}\n// ]\n```\n\n<a name='list-reverse'></a>\n### List#reverse()\nReturns a new `List` of the instance's items with their order reversed.\n\n```js\nvar ls = coll.List('abc');\nvar x = ls.reverse();\n// x  => ['c', 'b', 'a']\n// ls => ['a', 'b', 'c']\n```\n\n<a name='list-concat'></a>\n### List#concat( iterable [, iterable*N*] )\nReturns a new `List` composed of the instance list concatenated to one or more\npassed iterables.\n\n```js\nvar ls = coll.List([2, true]);\nvar x = ls.concat('abc', coll.List([0,1,2]), [12.99]);\n// x  => [2, true, 'a', 'b', 'c', 0, 1, 2, 12.99]\n// ls => [2, true]\n```\n\n<a name='list-map'></a>\n### List#map( [context,] iterator )\nReturns a new `List` of values determined by the `iterator` function.\n\n```js\nvar ls = coll.List([\n  {name:'Jay'}, {name:'Joan'}, {name:'Bob'}, {name:'Flo'}, {name:'Jim'}\n]);\nvar x = ls.map(function(item, index, list) {\n  return 'User ' + item.name;\n});\n// x => [\n//  'User Jay', 'User Joan', 'User Bob', 'User Flo', 'User Jim'\n// ]\n\n// With optional context\nvar obj = {foo:'bar'};\nls.map(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-intersperse'></a>\n### List#intersperse( obj )\nReturns a new `List` with `obj` inserted between every item in the list.\n\n```js\nvar ls = coll.List([1,2,3,4,5]);\nvar x = ls.intersperse('|');\n// x => [\n//  1, '|', 2, '|', 3, '|', 4, '|', 5\n// ]\n```\n\n<a name='list-join'></a>\n### List#join( [separator] )\nBorrowed from `Array#join`.\n\n```js\nvar ls = coll.List([2, 4, 6]);\nvar x = ls.join();\n// x => '2,4,6'\n\nx = ls.join(' - ');\n// x => '2 - 4 - 6'\n```\n\n<a name='list-unique'></a>\n### List#unique()\nReturns a new `List` of non-duplicate items found within the instance list.\nDuplicates are determines with strict equality.\n\n```js\nvar ls = coll.List('abcddcba');\nvar x = ls.unique();\n// x => ['a', 'b', 'c', 'd']\n```\n\n<a name='list-clean'></a>\n### List#clean()\nReturns a copy of the list with all occurences of `undefined`, `null`, and\n`NaN` removed.\n\n```js\nvar ls = coll.List(['a', null, 0, false, undefined, +'foo', 'bar']);\nvar x = ls.clean();\n// x => ['a', 0, false, 'bar']\n```\n\n<a name='list-clone'></a>\n### List#clone()\nReturns a copy of the list in a new instance.\n\n```js\nvar ls = coll.List([2,4]);\nvar x = ls.clone();\n// x  => [2, 4]\n// ls => [2, 4]\nx instanceof coll.List; // true\nx === ls;               // false\n```\n\n<a name='list-toarray'></a>\n### List#toArray()\nReturns a copy of the list's items in an `Array`.\n\n```js\nvar ls = coll.List([true, 'fajita', 4.89]);\nvar x = ls.toArray();\n// x => [true, 'fajita', 4.89]\nArray.isArray(x); // true;\n```\n\n<a name='list-take'></a>\n### List#take( howmany )\nReturns a new `List` of the first `howmany` contiguous items from the\ninstance list.\n\n```js\nvar ls = coll.List('abcdefg');\nvar x = ls.take(3);\n// x => ['a', 'b', 'c']\n```\n\n<a name='list-takewhile'></a>\n### List#takeWhile( [context,] iterator )\nReturns a new `List` of contiguous items, starting at the beginning of the\nlist, so long as the `iterator` function returns true.\n\n```js\nvar ls = coll.List([4,2,6,3,8,4,2,6]);\nvar x = ls.takeWhile(function(item, index, list) {\n  return item < 8;\n});\n// x => [4, 2, 6, 3]\n\n// With optional context\nvar obj = {foo:'bar'};\nls.takeWhile(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-drop'></a>\n### List#drop( howmany )\nReturns a new `List` of contiguous items, dropping the first `howmany` items\nfrom the instance list.\n\n```js\nvar ls = coll.List('abcdefg');\nvar x = ls.drop(3);\n// x => ['d', 'e', 'f', 'g']\n```\n\n<a name='list-dropwhile'></a>\n### List#dropWhile( [context,] iterator )\nReturns a new `List` of contiguous items, starting at the first item in the\ninstance list that fails the passed `iterator` function.\n\n```js\nvar ls = coll.List([4,2,6,3,8,4,2,6]);\nvar x = ls.dropWhile(function(item, index, list) {\n  return item < 8;\n});\n// x => [8, 4, 2, 6]\n\n// With optional context\nvar obj = {foo:'bar'};\nls.dropWhile(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-group'></a>\n### List#group( [[context,] iterator] )\nReturns a hash of sublists, grouped either by equality to each other or by\nthe result of the optional `iterator` function.\n\n```js\nvar ls = coll.List([2,3,1,2,2,3]);\nvar x = ls.group();\n// x => {\n//  '1' : [1],\n//  '2' : [2, 2, 2],\n//  '3' : [3, 3]\n// }\n```\n```js\n// With optional iterator function\nvar ls = coll.List(['#fff', '#3366ee', 'magenta', '#ccc', 'red'])\nvar hexColorRegex = /^#[abcdef0-9]{3,6}$/i;\nvar x = ls.group(function(item, index, list) {\n  return hexColorRegex.test(item)\n    ? 'hex'\n    : 'named';\n});\n// x => {\n//  hex   : ['#fff', '#3366ee', '#ccc'],\n//  named : ['magenta', 'red']\n// }\n```\n\n<a name='list-partition'></a>\n### List#partition( [context,] iterator )\nReturns an `Array` of two `List`s. The first list is composed of the items\nthat pass the `iterator` function. The second list is composed of those items\nthat failed it.\n\n```js\nvar ls = coll.List([2,4,8,3,6,3,9,0,7]);\nvar x = ls.partition(function(item, index, list) {\n  return item < 5;\n});\n// x => [\n//  [2, 4, 3, 3, 0],\n//  [8, 6, 9, 7]\n// ]\nArray.isArray(x);     // true\nx[0] instanceof coll.List; // true\nx[1] instanceof coll.List; // true\n\n// With optional context\nvar obj = {foo:'bar'};\nls.partition(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-intersect'></a>\n### List#intersect( iterable )\nReturns a new `List` of items present in both the instance list and in the\npassed iterable.\n\n```js\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\nvar x = ls.intersect(['peach', 'pear', 'plum', 'apple', 'mango']);\n// x => ['apple', 'pear']\n```\n\n<a name='list-difference'></a>\n### List#difference( iterable )\nReturns a new list composed of the list values not present in\nthe passed iterable.\n\n```js\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\nvar x = ls.difference(['peach', 'pear', 'plum', 'apple', 'mango']);\n// x => ['orange', 'grape']\n```\n\n<a name='list-union'></a>\n### List#union( iterable )\nReturns a new `List` representing the union of the list and in the\npassed iterable. That is, the combined unique items between the two.\n\n```js\nvar ls = coll.List(['apple', 'orange', 'pear', 'grape']);\nvar x = ls.union(['peach', 'pear', 'plum', 'apple', 'mango']);\n// x => ['apple', 'orange', 'pear', 'grape', 'peach', 'plum', 'mango']\n```\n\n<a name='list-zip'></a>\n### List#zip( iterable [, iterable*N*] )\nReturns a new `List` of `List`s by merging values of the instance list\nwith the passed iterables at their corresponding indices.\n\nIf passed iterables are shorter than instance list, `undefined` will\nbe used for missing values. If passed iterables are longer than the\ninstance list, values will be trimmed.\n\n```js\nvar ls = coll.List(['alpha', 'bravo', 'charlie']);\nvar x = ls.zip([2, 4, 6]);\n// x => [\n//   ['alpha',   2],\n//   ['bravo',   4],\n//   ['charlie', 6]\n// ]\n```\n\n```js\n// With a shorter iterable passed.\nvar ls = coll.List(['alpha', 'bravo', 'charlie']);\nvar x = ls.zip([1,2], 'abc');\n// x => [\n//   ['alpha',   1,         'a'],\n//   ['bravo',   2,         'b'],\n//   ['charlie', undefined, 'c']\n// ]\n```\n\n```js\n// With a longer iterable passed.\nvar ls = coll.List(['alpha', 'bravo', 'charlie']);\nvar x = ls.zip([1,2,3,4,5,6], 'abcdefghij');\n// x => [\n//   ['alpha',   1, 'a'],\n//   ['bravo',   2, 'b'],\n//   ['charlie', 3, 'c']\n// ]\n```\n\n<a name='list-indexof'></a>\n### List#indexOf( item [, index] )\nReturns the index of the first occurence of `item` in the list.\nIf `item` is not found, `-1` will be returned.\nBorrowed from `Array#indexOf`.\n\n```js\nvar ls = coll.List([1.99, 8.99, 3.99, 1.99, 7.99, 3.99, 1.99]);\nvar x = ls.indexOf(3.99);\n// x => 2\nx = ls.indexOf(9.99);\n// x => -1\n```\n\n<a name='list-lastindexof'></a>\n### List#lastIndexOf( item [, index] )\nReturns the index of the last occurence of `item` in the list.\nIf `item` is not found, `-1` will be returned.\nBorrowed from `Array#lastIndexOf`.\n\n```js\nvar ls = coll.List([1.99, 8.99, 3.99, 1.99, 7.99, 3.99, 1.99]);\nvar x = ls.lastIndexOf(3.99);\n// x => 5\nx = ls.lastIndexOf(9.99);\n// x => -1\n```\n\n<a name='list-indexif'></a>\n### List#indexIf( [index, [context,]] iterator )\nReturns the index of the first item in the list that passes the `iterator`\nfunction.\n\n```js\nvar ls = coll.List([\n  {name:'Leo'}, {name:'Jeb'}, {name:'Jojo'}, {name:'Flo'}, {name:'Jojo'}\n]);\nvar x = ls.indexIf(function(item, index, list) {\n  return item.name === 'Jojo';\n});\n// x => 2\n```\n```js\n// With optional start index\nvar ls = coll.List([2,3,6,4,7,4,6]);\nvar x = ls.indexIf(2, function(item, index, list) {\n  return item % 2 !== 0;\n});\n// x => 4\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nls.indexIf(null, obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-lastindexif'></a>\n### List#lastIndexIf( [index, [context,]] iterator )\nReturns the index of the last item in the list that passes the `iterator`\nfunction.\n\n```js\nvar ls = coll.List([\n  {name:'Leo'}, {name:'Jeb'}, {name:'Jojo'}, {name:'Flo'}, {name:'Jojo'}\n]);\nvar x = ls.lastIndexIf(function(item, index, list) {\n  return item.name === 'Jojo';\n});\n// x => 4\n```\n```js\n// With optional start index\nvar ls = coll.List([2,3,6,4,7,4,6]);\nvar x = ls.lastIndexIf(3, function(item, index, list) {\n  return item % 2 !== 0;\n});\n// x => 1\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nls.lastIndexIf(null, obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-indicesof'></a>\n### List#indicesOf( item [, index] )\nReturns the indices of every item in the list matching `item`.\n\n```js\nvar ls = coll.List('abcaegaatf');\nvar x = ls.indicesOf('a');\n// x => [0, 3, 6, 7]\n```\n```js\n// With optional index\nvar ls = coll.List('abcaegaatf');\nvar x = ls.indicesOf('a', 2);\n// x => [3, 6, 7]\n```\n\n<a name='list-indicesif'></a>\n### List#indicesIf( [index, [context,]] iterator )\nReturns the indices of every item in the list that passes the `iterator\nfunction.\n\n```js\nvar ls = coll.List([1,2,3,4,5,6,7]);\nvar x = ls.indicesIf(function(item, index, list) {\n  return item % 2 === 0;\n});\n// x => [1, 3, 5]\n```\n```js\n// With optional start index\nvar ls = coll.List([1,2,3,4,5,6,7]);\nvar x = ls.indicesIf(2, function(item, index, list) {\n  return item % 2 === 0;\n});\n// x => [3, 5]\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nls.indicesIf(null, obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-foreach'></a>\n### List#forEach( [context,] iterator )\nIterates over the items in the list, invoking the passed `iterator` function\nfor each item. Returns the list instance.\n\n```js\nvar ls = coll.List(['Taco', 'Burrito', 'Fajita']);\nvar x = ls.forEach(function(item, index, list) {\n  console.log('%d : %s', index, item);\n});\n// Console output:\n//  0 : Taco\n//  1 : Burrito\n//  2 : Fajita\nx === ls; // true\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nls.forEach(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-some'></a>\n### List#some( [context,] iterator )\nReturns `true` if at least one item in the list passes the `iterator` function.\nOtherwise `false` is returned.\n\n```js\nvar ls = coll.List([2,4,6,9,10]);\nvar x = ls.some(function(item, index, list) {\n  return item % 2 !== 0;\n});\n// x => true\n\nx = ls.some(function(item, index, list) {\n  return item > 50;\n});\n// x => false\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nls.some(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-every'></a>\n### List#every( [context,] iterator )\nReturns `true` if every item in the list passes the `iterator` test.\nOtherwise `false` is returned.\n\n```js\nvar ls = coll.List([2,4,6,9,10]);\nvar x = ls.every(function(item, index, list) {\n  return item <= 10;\n});\n// x => true\n\nx = ls.every(function(item, index, list) {\n  return item % 2 === 0;\n});\n// x => false\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nls.every(obj, function(item, index, list) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='list-reduce'></a>\n### List#reduce( [initval,] iterator )\nReduces the list into a single accumulated value.\nLeft to right.\n\n```js\nvar ls = coll.List([1,2,3]);\nvar sum = ls.reduce(function(a, b, index, list) {\n  return a + b;\n});\n// sum => 6\n```\n```js\nvar ls = coll.List([3,8,2,5]);\nvar max = ls.reduce(function(a, b, index, list) {\n  return a >= b ? a : b;\n});\n// max => 8\n```\n```js\n// With optional initval\nvar ls = coll.List([1,2,3]);\nvar x = ls.reduce([], function(arr, b, index, list) {\n  arr.push(b * 10);\n  return arr;\n});\n// x => [10, 20, 30]\n```\n\n<a name='list-reduceright'></a>\n### List#reduceRight( [initval,] iterator )\nReduces the list into a single accumulated value.\nRight to left.\n\n```js\nvar ls = coll.List('abc');\nvar x = ls.reduceRight(function(a, b, index, list) {\n  return a + b;\n});\n// x => 'cba'\n```\n```js\n// With optional initval\nvar ls = coll.List('abc');\nvar x = ls.reduceRight('---', function(str, b, index, list) {\n  return str + b;\n});\n// x => '---cba'\n```\n\n\n[List]:               #list\n\n[List.range]:         #list_range\n\n[List Constructor]:   #list-constructor\n\n[List#length]:        #list-length\n\n[List#get]:           #list-get\n[List#set]:           #list-set\n[List#add]:           #list-add\n[List#addRange]:      #list-addrange\n[List#insert]:        #list-insert\n[List#insertRange]:   #list-insertrange\n[List#remove]:        #list-remove\n[List#removeFirst]:   #list-removefirst\n[List#removeLast]:    #list-removelast\n[List#removeIf]:      #list-removeif\n[List#removeAll]:     #list-removeall\n[List#removeAt]:      #list-removeat\n[List#clear]:         #list-clear\n\n[List#slice]:         #list-slice\n[List#concat]:        #list-concat\n[List#join]:          #list-join\n[List#count]:         #list-count\n[List#countIf]:       #list-countif\n[List#contains]:      #list-contains\n[List#find]:          #list-find\n[List#findLast]:      #list-findlast\n[List#findAll]:       #list-findall\n[List#first]:         #list-first\n[List#last]:          #list-last\n[List#unique]:        #list-unique\n[List#clean]:         #list-clean\n\n[List#clone]:         #list-clone\n[List#toArray]:       #list-toarray\n\n[List#intersect]:     #list-intersect\n[List#difference]:    #list-difference\n[List#union]:         #list-union\n[List#max]:           #list-max\n[List#min]:           #list-min\n\n[List#zip]:           #list-zip\n\n[List#take]:          #list-take\n[List#takeWhile]:     #list-takewhile\n[List#drop]:          #list-drop\n[List#dropWhile]:     #list-dropwhile\n[List#group]:         #list-group\n[List#partition]:     #list-partition\n\n[List#indexOf]:       #list-indexof\n[List#lastIndexOf]:   #list-lastindexof\n[List#indexIf]:       #list-indexif\n[List#lastIndexIf]:   #list-lastindexif\n[List#indicesOf]:     #list-indicesof\n[List#indicesIf]:     #list-indicesif\n\n[List#forEach]:       #list-foreach\n[List#some]:          #list-some\n[List#every]:         #list-every\n[List#reduce]:        #list-reduce\n[List#reduceRight]:   #list-reduceright\n\n[List#sort]:          #list-sort\n[List#reverse]:       #list-reverse\n\n[List#filter]:        #list-filter\n[List#reject]:        #list-reject\n[List#map]:           #list-map\n[List#intersperse]:   #list-intersperse\n\n\n[Array#sort]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\n\n\n\n<a name='dict'></a>\nDict\n====\nA simple key/value collection, where keys are `Strings` and values can be any\ntype or object. Keys are unique within the collection.\n\n\n<a name='dict-constructor'></a>\nDict Constructor\n----------------\n`new` is optional\n\n```js\nvar d1 = new coll.Dict;\nvar d2 = coll.Dict();\n\nd1 instanceof coll.Dict; // true\nd2 instanceof coll.Dict; // true\n```\n\nAccepts an object literal to initially populate the dict.\n\n```js\nvar d = coll.Dict({a:10, b:20});\n// d => {a:10, b:20}\n```\n\nDict Instance Properties\n------------------------\n\n<a name='dict-length'></a>\n### Dict#length\nThe number of items in the dict.\n\n```js\nvar d = coll.Dict({a:2, b:4, c:6});\n// d.length => 3\n```\n\n<a name='dict-keys'></a>\n### Dict#keys\nAn array of the dict's keys. Order is arbitrary.\n\n```js\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\n// d.keys => ['name', 'age', 'town']\n```\n\n<a name='dict-values'></a>\n### Dict#values\nAn array of the dict's values. Order is arbitrary.\n\n```js\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\n// d.values => ['Fred', 5000, 'Bedrock']\n```\n\nDict Instance Functions\n-----------------------\n\n<a name='dict-haskey'></a>\n### Dict#haskey( key )\nReturns `true` if `key` exists within the dict. Otherwise `false` is returned.\n\n```js\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\nd.hasKey('town');    // true\nd.hasKey('address'); // false\n```\n\n<a name='dict-get'></a>\n### Dict#get( key [, \\_default] )\nReturns the value for `key`.\nIf an optional `_default` value is passed, that will be returned in cases\nwhere the `key` does not exist within the dict.\nIf `key` does not exist within the dict and `_default` is not passed,\na `ReferenceError` is thrown.\n\n```js\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\nvar x = d.get('town');\n// x => 'Bedrock'\n\nx = d.get('occupation', 'excavator');\n// x => 'excavator'\n\nd.get('occupation'); // throws ReferenceError\n```\n\n<a name='dict-set'></a>\n### Dict#set( key, value )\nSet value `value` for key `key`. If the key already exists in the dict\nthen it's value will be overwritten. If the `key` does not exist, then it\nwill be added. Returns the instance.\n\n```js\nvar d = coll.Dict();\nvar x = d.set('volume', .92);\n// d => {volume: .92}\nx === d; // true\n\nd.set('volume', .85);\n// d => {volume: .85}\n```\n\n<a name='dict-add'></a>\n### Dict#add( hash [, hash*N*] )\nAdds one or more key/value pairs to the dict.\nReturns the instance.\n\n```js\nvar d = coll.Dict();\nd.add({a:'alpha', b:'bravo'});\nd.add({c:'charlie'}, {d:'delta', e:'echo'}, {f:'foxtrot'});\n// d => {\n//  a:'alpha', b:'bravo', c:'charlie', d:'delta', e:'echo', f:'foxtrot'\n// }\n```\n\n<a name='dict-remove'></a>\n### Dict#remove( key )\nRemoves a key/value pair from the collection by `key` and returns the\nremoved value.\nIf `key` does not exist within the dict a `ReferenceError` is thrown.\n\n```js\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\nvar x = d.remove('town');\n// x => 'Bedrock'\n// d => {name:'Fred', age:5000}\n\nd.remove('occupation'); // throws ReferenceError\n```\n\n<a name='dict-clear'></a>\n### Dict#clear()\nRemoves all key/value pairs from the dict. Returns the instance.\n\n```js\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\nvar x = d.clear();\n// d => {}\nx === d; // true\n```\n\n<a name='dict-foreach'></a>\n### Dict#forEach( [context,] iterator )\nIterates over the dict, calling the `iterator` function for\neach key/value pair. Returns the instance.\n\n```js\nvar d = coll.Dict({name:'Fred', age:5000, town:'Bedrock'});\nvar x = d.forEach(function(key, value, dict) {\n  console.log('Key: %s, Val: %s', key, value);\n});\n// Output:\n//  Key: name, Val: Fred\n//  Key: age, Val: 5000\n//  Key: town, Val: Bedrock\nx === d; // true\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nd.forEach(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='dict-some'></a>\n### Dict#some( [context,] iterator )\nReturns `true` if at least one key/value pair in the dict passes the\n`iterator` function.\nOtherwise `false` is returned.\n\n```js\nvar d = coll.Dict();\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\nvar x = d.some(function(key, value, dict) {\n  return value.year > 1996;\n});\n// x => true\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nd.some(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='dict-every'></a>\n### Dict#every( [context,] iterator )\nReturns `true` if every key/value pair in the dict passes the\n`iterator` function.\nOtherwise `false` is returned.\n\n```js\nvar d = coll.Dict();\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\nvar x = d.every(function(key, value, dict) {\n  return value.album === 'OK Computer';\n});\n// x => false\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nd.every(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='dict-filter'></a>\n### Dict#filter( [context,] iterator )\nReturns a new `Dict` composed of key/value pairs that pass the\n`iterator` function.\n\n```js\nvar d = coll.Dict();\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\nvar x = d.filter(function(key, value, dict) {\n  return value.album === 'OK Computer';\n});\n// x => {\n//  'Paranoid Android' : {year:1997, album:'OK Computer'},\n//  'Karma Police'     : {year:1997, album:'OK Computer'}\n// }\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nd.filter(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='dict-reject'></a>\n### Dict#reject( [context,] iterator )\nReturns a new `Dict` composed of key/value pairs that fail the\n`iterator` function.\n\n```js\nvar d = coll.Dict();\nd.set('Creep',            {year:1993, album:'Pablo Honey'});\nd.set('Paranoid Android', {year:1997, album:'OK Computer'});\nd.set('Karma Police',     {year:1997, album:'OK Computer'});\nvar x = d.reject(function(key, value, dict) {\n  return value.album === 'OK Computer';\n});\n// x => {\n//  'Creep' : {year:1993, album:'Pablo Honey'},\n// }\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nd.reject(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='dict-clone'></a>\n### Dict#clone()\nReturns a copy of the dict in a new instance.\n\n```js\nvar d = coll.Dict({a:2, b:4});\nvar x = d.clone();\n// x => {a:2, b:4}\n// d => {a:2, b:4}\nx instanceof coll.Dict; // true\nx === d;                // false\n```\n\n<a name='dict-fill'></a>\n### Dict#fill( defaults )\nReturns a new `Dict` with the *holes* in the instance collection filled\nby the those defined in `defaults`.\n`defaults` can be an object literal or another `Dict`.\n\n```js\n// Example: Day calendar of schedule openings, 9am to 2pm\nvar defaultSchedule = {\n  '9:00 am'  : 'unavailable',\n  '10:00 am' : 'unavailable',\n  '11:00 am' : 'unavailable',\n  '12:00 pm' : 'unavailable',\n  '1:00 pm'  : 'unavailable',\n  '2:00 pm'  : 'unavailable'\n}\nvar openings = coll.Dict({\n  '10:00 am' : 'open',\n  '11:00 am' : 'open',\n  '1:00 pm'  : 'open'\n});\n\nvar sched = openings.fill(defaultSchedule);\n// sched => {\n//   '9:00 am'  : 'unavailable',\n//   '10:00 am' : 'open',\n//   '11:00 am' : 'open',\n//   '12:00 pm' : 'unavailable',\n//   '1:00 pm'  : 'open',\n//   '2:00 pm'  : 'unavailable'\n// }\n```\n\n<a name='dict-toliteral'></a>\n### Dict#toLiteral( [serializer] )\nReturns the key/value pairs of the dict as an object literal.\nIf the optional `serializer` function is passed, that will be used to\ndetermine the key.\n\n\n```js\nvar d = coll.Dict({a:10, b:20, c:30});\nvar obj = d.toLiteral();\n// obj => {a:10, b:20, c:30}\nfor (var key in obj) {\n  console.log('%s : %s', key, obj[key]);\n}\n// Output:\n//  a : 10\n//  b : 20\n//  c : 30\n```\n```js\n// With optional serializer\nvar d = coll.Dict({a:10, b:20, c:30});\nvar obj = d.toLiteral(function(key, value) {\n  return key.toUpperCase();\n});\n// obj => {A:10, B:20, C:30}\n```\n\n<a name='dict-toarray'></a>\n### Dict#toArray()\nReturns the dict's key/value pairs in an array of 'tuples'.\n\n```js\nvar d = coll.Dict({a:10, b:20, c:30});\nvar x = d.toArray();\n// x => [['a', 10], ['b', 20], ['c', 30]]\n```\n\n\n[Dict]:               #dict\n[Dict Constructor]:   #dict-constructor\n\n[Dict#length]:        #dict-length\n[Dict#keys]:          #dict-keys\n[Dict#values]:        #dict-values\n\n[Dict#hasKey]:        #dict-haskey\n\n[Dict#get]:           #dict-get\n[Dict#set]:           #dict-set\n[Dict#add]:           #dict-add\n[Dict#remove]:        #dict-remove\n[Dict#clear]:         #dict-clear\n\n[Dict#forEach]:       #dict-foreach\n[Dict#some]:          #dict-some\n[Dict#every]:         #dict-every\n[Dict#filter]:        #dict-filter\n[Dict#reject]:        #dict-reject\n\n[Dict#clone]:        #dict-clone\n[Dict#fill]:         #dict-fill\n[Dict#toLiteral]:    #dict-toliteral\n[Dict#toArray]:      #dict-toarray\n\n\n\n\n\n<a name='map'></a>\nMap\n===\nA key/value collection, where both keys and values can be any object or type.\nKeys are unique within the collection by strict equality.\n\n\n<a name='map-constructor'></a>\nMap Constructor\n---------------\n`new` is optional\n\n```js\nvar m1 = new coll.Map;\nvar m2 = coll.Map();\n\nm1 instanceof coll.Map; // true\nm2 instanceof coll.Map; // true\n```\n\nAccepts an array of key/value pairs ('tuples') to initially populate the map.\n\n```js\nvar m = coll.Map([['a', 10], [/foo/i, 20]]);\n// m => {\n//  'a'    => 10,\n//  /foo/i => 20\n// }\n```\n\nMap Instance Properties\n-----------------------\n\n<a name='map-length'></a>\n### Map#length\nThe number of items in the map.\n\n```js\nvar m = coll.Map([['a', 10], [/foo/i, 20]]);\n// m.length => 2\n```\n\n<a name='map-keys'></a>\n### Map#keys\nAn array of the map's keys. Order is arbitrary.\n\n```js\nvar m = coll.Map([[{a:1}, 'dog'], [{b:2}, 'cat'], [23.389, 'rock']]);\n// m.keys => [{a:1}, {b:2}, 23.389]\n```\n\n<a name='map-values'></a>\n### Map#values\nAn array of the dict's values. Order is arbitrary.\n\n```js\nvar m = coll.Map([[{a:1}, 'dog'], [{b:2}, 'cat'], [23.389, 'rock']]);\n// m.values => ['dog', 'cat', 'rock']\n```\n\nMap Instance Functions\n----------------------\n\n<a name='map-haskey'></a>\n### Map#haskey( key )\nReturns `true` if `key` exists within the map. Otherwise `false` is returned.\nKeys are determined and are unique by strict equality.\n\n```js\nvar m = coll.Map();\nvar key1 = {a:1};\nvar key2 = /foo/i;\nm.set(key1, 'a');\nm.set(key2, 'b');\nm.set(9999, 'c');\n\nm.hasKey(key1);   // true\nm.hasKey({a:1});  // false\nm.hasKey(key2);   // true\nm.hasKey(/foo/i); // false\nm.hasKey(9999);   // true\n```\n\n<a name='map-get'></a>\n### Map#get( key [, \\_default] )\nReturns the value for `key`.\nIf an optional `_default` value is passed, that will be returned in cases\nwhere the `key` does not exist within the map.\nIf `key` does not exist within the map and `_default` is not passed,\na `ReferenceError` is thrown.\nKeys are determined and are unique by strict equality.\n\n```js\nvar m = coll.Map();\nvar key1 = /foo/gi;\nm.set(key1, 'stuff');\nm.set(23.89, 'thing');\n\nvar x = m.get(key1);\n// x => 'stuff'\nx = m.get(23.89);\n// x => 'thing'\n\nx = m.get(/bar/gi, 'nada');\n// x => 'nada'\n\nm.get(77.11);   // throws ReferenceError\nm.get(/foo/gi); // throws ReferenceError\n```\n\n<a name='map-set'></a>\n### Map#set( key, value )\nSet value `value` for key `key`. If the key already exists in the map\nthen it's value will be overwritten. If the `key` does not exist, then it\nwill be added. Returns the instance.\n\n```js\nvar m = coll.Map();\nvar x = m.set('volume', .92);\n// m => {\n//  'volume' => .92\n// }\nx === d; // true\n\nd.set('volume', .85);\n// m => {\n//  'volume' => .85\n// }\n```\n\n<a name='map-remove'></a>\n### Map#remove( key )\nRemoves a key/value pair from the collection by `key` and returns the\nremoved value.\nIf `key` does not exist within the map a `ReferenceError` is thrown.\n\n```js\nvar m = coll.Map();\nvar key1 = {name:'Jen'};\nvar key2 = {name:'Tim'};\nm.set(key1, 83.234);\nm.set(key2, 72.183);\nm.set('yo', 14.384);\n\nvar x = m.remove(key2);\n// x => 72.183\n// m => {\n//  {name:'Jen'} => 83.234,\n//  'yo'         => 14.384\n// }\n\nm.remove('hi');         // throws ReferenceError\nm.remove({name:'Jen'}); // throws ReferenceError\n```\n\n<a name='map-clear'></a>\n### Map#clear()\nRemoves all key/value pairs from the map. Returns the instance.\n\n```js\nvar m = coll.Map([[/yo/, 'joe'], [new Date, 123]]);\nvar x = m.clear();\n// m => {}\nx === m; // true\n```\n\n<a name='map-foreach'></a>\n### Map#forEach( [context,] iterator )\nIterates over the map, calling the `iterator` function for\neach key/value pair. Returns the instance.\n\n```js\nvar m = coll.Map();\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\nm.set(new Date(2012, 3, 17), 'Taxes!!');\nm.set(new Date(2012, 9, 31), 'Halloween');\n\nvar x = m.forEach(function(key, value, map) {\n  console.log('Key: %s, Val: %s', key.toDateString(), value);\n});\n// Output:\n//  Key: Sat May 05 2012, Val: Cinco de Mayo\n//  Key: Tue Apr 17 2012, Val: Taxes!!\n//  Key: Wed Oct 31 2012, Val: Halloween\nx === m; // true\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nm.forEach(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='map-some'></a>\n### Map#some( [context,] iterator )\nReturns `true` if at least one key/value pair in the map passes the\n`iterator` function.\nOtherwise `false` is returned.\n\n```js\nvar m = coll.Map();\nm.set(new Date(2011, 9, 31), 'Halloween');\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\nm.set(new Date(2012, 3, 17), 'Taxes!!');\nm.set(new Date(2012, 9, 31), 'Halloween');\n\nvar x = m.some(function(key, value, dict) {\n  return value !== 'Halloween' && key.getFullYear() === 2012;\n});\n// x => true\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nm.some(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='map-every'></a>\n### Map#every( [context,] iterator )\nReturns `true` if every key/value pair in the map passes the\n`iterator` function.\nOtherwise `false` is returned.\n\n```js\nvar m = coll.Map();\nm.set(new Date(2011, 9, 31), 'Halloween');\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\nm.set(new Date(2012, 3, 17), 'Taxes!!');\nm.set(new Date(2012, 9, 31), 'Halloween');\n\nvar x = m.every(function(key, value, dict) {\n  return key.getFullYear() === 2012;\n});\n// x => false\n\nx = m.every(function(key, value, dict) {\n  return key.getFullYear() > 2010;\n});\n// x => true\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nm.every(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='map-filter'></a>\n### Map#filter( [context,] iterator )\nReturns a new `Map` composed of key/value pairs that pass the\n`iterator` function.\n\n```js\nvar m = coll.Map();\nm.set(new Date(2011, 9, 31), 'Halloween');\nm.set(new Date(2012, 0, 1),  'New Years');\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\nm.set(new Date(2012, 3, 17), 'Taxes!!');\nm.set(new Date(2012, 9, 31), 'Halloween');\n\nvar x = m.filter(function(key, value, dict) {\n  return key.getMonth() >= 3 && value !== 'Taxes!!';\n});\n// x => {\n//  Mon Oct 31 2011 => 'Halloween',\n//  Sat May 05 2012 => 'Cinco de Mayo',\n//  Wed Oct 31 2012 => 'Halloween'\n// }\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nm.filter(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='map-reject'></a>\n### Map#reject( [context,] iterator )\nReturns a new `Map` composed of key/value pairs that fail the\n`iterator` function.\n\n```js\nvar m = coll.Map();\nm.set(new Date(2011, 9, 31), 'Halloween');\nm.set(new Date(2012, 0, 1),  'New Years');\nm.set(new Date(2012, 4, 5),  'Cinco de Mayo');\nm.set(new Date(2012, 3, 17), 'Taxes!!');\nm.set(new Date(2012, 9, 31), 'Halloween');\n\nvar x = m.reject(function(key, value, dict) {\n  return key.getMonth() > 3;\n});\n// x => {\n//  Sun Jan 01 2012 => 'New Years'\n//  Tue Apr 17 2012 => 'Taxes!!'\n// }\n```\n```js\n// With optional context\nvar obj = {foo:'bar'};\nm.reject(obj, function(key, value, dict) {\n  // this => {foo:'bar'}\n});\n```\n\n<a name='map-clone'></a>\n### Map#clone()\nReturns a copy of the map in a new instance.\n\n```js\nvar m = coll.Map([[{a:1}, 11], [{b:2}, 22]]);\nvar x = m.clone();\n\n// x => {\n//  {a:1} => 11,\n//  {b:2} => 22\n// }\n// m => {\n//  {a:1} => 11,\n//  {b:2} => 22\n// }\nx instanceof coll.Map; // true\nx === m;               // false\n```\n\n<a name='map-fill'></a>\n### Map#fill( defaults )\nReturns a new `Map` with the *holes* in the instance collection filled\nby the those defined in `defaults`.\n`defaults` can be an Array of *tuples* or another `Map`.\n\n```js\n// Example: Day calendar of schedule openings, 9am to 2pm\nvar defaultSchedule = [\n  ['9:00 am',  'unavailable'],\n  ['10:00 am', 'unavailable'],\n  ['11:00 am', 'unavailable'],\n  ['12:00 pm', 'unavailable'],\n  ['1:00 pm',  'unavailable'],\n  ['2:00 pm',  'unavailable']\n];\nvar openings = coll.Map([\n  ['10:00 am', 'open'],\n  ['11:00 am', 'open'],\n  ['1:00 pm',  'open']\n]);\n\nvar sched = openings.fill(defaultSchedule);\n// sched => {\n//   '9:00 am'  => 'unavailable',\n//   '10:00 am' => 'open',\n//   '11:00 am' => 'open',\n//   '12:00 pm' => 'unavailable',\n//   '1:00 pm'  => 'open',\n//   '2:00 pm'  => 'unavailable'\n// }\n```\n\n<a name='map-toliteral'></a>\n### Map#toLiteral( [serializer] )\nReturns the key/value pairs of the map as an object literal.\nIf the optional `serializer` function is passed, that will be used to\ndetermine the key.\n\nIf your map keys are not strings, numbers, or anything that would not\nautomatically convert (`toString()`) to a unique key string, it is highly\nrecommended that you provide a `serializer` function. Otherwise you will\nrisk losing key/value pairs due to key collision and/or the keys produced\nmay not be that descriptive.\n\n```js\nvar m = coll.Map();\nvar key1 = {position:'rb', team:'Vikings'};\nvar key2 = {position:'wr', team:'Cardinals'};\nvar key3 = {position:'ss', team:'Steelers'};\nm.set(key1, 'Peterson');\nm.set(key2, 'Fitz');\nm.set(key3, 'Polamalu');\n\nvar x = m.toLiteral(function(key, val) {\n  return key.team + ':' + key.position;\n});\n// x => {\n//  'Vikings:rb':   'Peterson',\n//  'Cardinals:wr': 'Fitz',\n//  'Steelers:ss':  'Polamalu'\n// }\nfor (var key in x) {\n  console.log('%s : %s', key, x[key]);\n}\n// Output:\n//  Vikings:rb : Peterson\n//  Cardinals:wr : Fitz\n//  Steelers:ss : Polamalu\n\n// Without serializer function\nx = m.toLiteral();\n// x => {'[object Object]': 'Polamalu'}\n```\n\n<a name='map-toarray'></a>\n### Map#toArray()\nReturns the map's key/value pairs in an array of 'tuples'.\n\n```js\nvar m = coll.Map();\nvar key1 = {position:'rb', team:'Vikings'};\nvar key2 = {position:'wr', team:'Cardinals'};\nvar key3 = {position:'ss', team:'Steelers'};\nm.set(key1, 'Peterson');\nm.set(key2, 'Fitz');\nm.set(key3, 'Polamalu');\n\nvar x = m.toArray();\n// x => [\n//  [{position:'rb', team:'Vikings'},   'Peterson'],\n//  [{position:'wr', team:'Cardinals'}, 'Fitz'],\n//  [{position:'ss', team:'Steelers'},  'Polamalu']\n// ]\n```\n\n\n[Map]:                #map\n[Map Constructor]:    #map-constructor\n\n[Map#length]:         #map-length\n[Map#keys]:           #map-keys\n[Map#values]:         #map-values\n\n[Map#hasKey]:         #map-haskey\n\n[Map#get]:            #map-get\n[Map#set]:            #map-set\n[Map#remove]:         #map-remove\n[Map#clear]:          #map-clear\n\n[Map#forEach]:        #map-foreach\n[Map#some]:           #map-some\n[Map#every]:          #map-every\n[Map#filter]:         #map-filter\n[Map#reject]:         #map-reject\n\n[Map#clone]:          #map-clone\n[Map#fill]:           #map-fill\n[Map#toLiteral]:      #map-toliteral\n[Map#toArray]:        #map-toarray\n\n",
  "_id": "coll@0.1.2",
  "_from": "coll"
}
